angular.module("google-map",
  [
   'broadcastService',
   'geolocationService',
   'RequestService',
   'Pin',
   'fileLoader',
   'cWindow'
  ]
).directive("googleMap", function($compile, $http, broadcastService, geolocationService, RequestService, Pin, fileLoader) {

  // Map defaults
  var _defaults = {
    zoom: 14,
    center: new google.maps.LatLng(37.7750, -122.4183),
    mapTypeId: 'road'
  };
  
  /* Creates either a new styled map from a hash of options
   * or a prestyled Stamen map.
   *
  */
  function drawMap(element, options, styled) {
    var map = new google.maps.Map(element, options),
        layer = null;

    if (typeof styled === "object") {
      map.mapTypes.set('map_style', styled);
      map.setMapTypeId('map_style');
    } else if (typeof styled === "string") {
      layer = styled;
      map.mapTypes.set(layer, new google.maps.StamenMapType(layer));
      map.setMapTypeId(layer);
    }
    return map;
  }
  
  return {
    priority: 100,
    restrict: 'EA',
    template: "<div class='angular-google-map' ng-transclude></div>",
    replace: false,
    transclude: true,
    scope: true,
    controller: function($scope, $compile, $rootScope, broadcastService) {
      $scope.currentMarker = null;
      $scope.businesses = null;
      $scope.markers = [];
      
      $rootScope.$on("BusinessSearch", function(evt, data) {
        $scope.setUpMarkers(data);
      });
      
      $scope.clearMarkers = function() {
        angular.forEach($scope.markers, function(marker) {
          marker.remove();
        });
        $scope.markers.length = 0;
      };
      
      $scope.setUpMarkers = function(data) {
        // Free existing markers from memory
        $scope.clearMarkers();

        $scope.move(17);
        $scope.businesses = data;

        angular.forEach(data, function(businessObj, index) {
          var business = businessObj.business,
							data = { 
								businessName: business.name, 
								score: businessObj.most_recent_score,
								index: index 
							};
		
          $scope.addMarker(business.latitude, business.longitude, data, index);
        }); 
      };
      
			// Force a re-draw of the google map
      $scope.refresh = function() {
        google.maps.event.trigger($scope.map, "resize");
      };

      /* Moves to the position returned by the location, service
       * @param {zoom} Integer Zoom the map to the desired level
      */
      $scope.move = function(zoom) {
        var lat = geolocationService.currentPosition.latitude,
            lng = geolocationService.currentPosition.longitude

        $scope.map.panTo(new google.maps.LatLng(lat, lng));
        
        // Zoom in the map if a new zoom was specified.
				if (!angular.isUndefined(zoom)) $scope.map.setZoom(zoom);
      };

      $scope.addMarker = function(lat, lng, data, index) {
        var location = new google.maps.LatLng(lat, lng),
            marker = new Pin({
              map: $scope.map,
              draggable: false,
              animation: google.maps.Animation.DROP,
              icon: "<%= asset_path('black_marker.svg') %>",
              position: location,
              enableEventPropagation: true
            }, data, index);

        google.maps.event.addDomListener(marker, 'click', $scope.setCurrentWindow);

        $scope.markers.push(marker);
      };

      $scope.setCurrentWindow = function() {
        if ($scope.currentMarker) {          
          // Remove the info window from the DOM/Google map
          $scope.currentMarker.toggleInfoWindow();
          
          // Remove the child controller scope from angular
				 	broadcastService.broadcast("DestroyContentWindow");
				 	
				 	// If the user clicked on the currently selected marker,
				 	// we don't want to reload the template.
					if ($scope.currentMarker === this) {
            $scope.currentMarker = null;

            return false;
          }

          $scope.currentMarker = null;
        }
        
        $scope.map.panTo(this.getPosition());
        var template = $compile('<div content-window business-index="' + this.index + '" business-name="'+this.data.businessName +'" score="'+this.data.score+'"></div>')($scope);
       	this.toggleInfoWindow(template)
       	
        $scope.currentMarker = this;
      };
    },

    link: function(scope, element, attrs, controller) {
      var styledMap = null,
          options = null;

      if (attrs.stylers) {
        fileLoader.load(attrs.stylers).success(function(data, status) {
          styledMap = new google.maps.StyledMapType(data.stylers, {name: "Styled Map"});
        });
      }

      if (attrs.stamentype) styledMap = attrs.stamentype;

      if (attrs.options) {
        // Extend the defaults with the passed in data options, interpereted as json
        options = angular.extend({}, _defaults, angular.fromJson(attrs.options));
      } else {
        options = _defaults;
      }

      google.maps.event.addDomListener(window, 'load', function() {
        scope.map = drawMap(element[0], options, styledMap);

        google.maps.event.addListener(scope.map, 'dragend', function(e) {
          var center = scope.map.getCenter();
          var coords = {
            latitude: center.lat() + "",
            longitude: center.lng() +""
          };

          geolocationService.updateCurrentPosition(coords);
          geolocationService.reverseGeocode(function(response) {
            request = RequestService.get("businesses", {
              lat: response.position.coords.latitude,
              lng: response.position.coords.longitude,
              address: response.address
            });

            request.success(function() {console.log(arguments) })
          });
        });
      });


      // This function kicks off the initial marker load event
      scope.$on("closeModal", function(evt, data) {
        element.removeClass("sepia-blur");
        scope.setUpMarkers(data);
      });
    }
  };
});
